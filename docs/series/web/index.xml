<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Tran Quac</title>
    <link>https://tranquac.github.io/series/web/</link>
    <description>Recent content in web on Tran Quac</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 30 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tranquac.github.io/series/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Notes on Code-Review</title>
      <link>https://tranquac.github.io/posts/2021/07/my-notes-on-code-review/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tranquac.github.io/posts/2021/07/my-notes-on-code-review/</guid>
      <description>The Fast Approach  First Leaked Secrets and Weak Encryption New Patches and Outdated Dependencies Developer Comments Debug Functionalities, Configuration Files, and Endpoints   The Detailed Approach  Important Functions User Input   Reference  The Fast Approach First  Using grep =&amp;gt; Look for specific dangerous patterns like specific -&amp;gt;  functions strings keywords and coding patterns that are known to be dangerous. Like =&amp;gt; eval() function   Focus on the search for dangerous functions used on user-controlled data.</description>
    </item>
    
    <item>
      <title>JWT Attack</title>
      <link>https://tranquac.github.io/posts/2021/07/jwt-attack/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tranquac.github.io/posts/2021/07/jwt-attack/</guid>
      <description>Jwt là gì  Header Payload Signature Ví dụ jwt   Phương thức tấn công  Thuật toán mã hóa Brute force secret key Sửa đổi thông số KID Sửa đổi thông số JKU / X5U Các phương pháp khác    Jwt la gi  Tên đầy đủ của JWT là Json Web Token. Nó tuân theo định dạng JSON và mã hóa thông tin người dùng vào token.</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://tranquac.github.io/posts/2021/06/sql/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tranquac.github.io/posts/2021/06/sql/</guid>
      <description>General  MySQL (3306) MSSQL (1433) Oracle (1521) PostgresSQL (5432)   SQL Injection  Bad character detect Authen bypass Sql injection bypass filter   SQLMAP Reference  General MySQL-3306 Nmap nmap -Pn -sV -p 3306 --script mysql* TARGETIP Access Remotely: mysql -host=TARGETIP -u root -p mysql -u root -p password -e &amp;#39;show databases;&amp;#39; mysql -u root -p password DBNAME -e &amp;#39;select * from TABLENAME;&amp;#39; Access Locally: mysql -u root -p mysql&amp;gt; use DBNAME; mysql&amp;gt; show tables; Command Backdoor example: SELECT &amp;#34;&amp;lt;?</description>
    </item>
    
    <item>
      <title>XXE</title>
      <link>https://tranquac.github.io/posts/2021/06/xxe/</link>
      <pubDate>Mon, 07 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tranquac.github.io/posts/2021/06/xxe/</guid>
      <description>What is XXE Types of XXE attacks  XXE To retrieve files  Example XXE through the XInclude tag Exploiting XXE using SVG Files or docx files or xlsx files   XXE Into SSRF Blind XXE   Payloads Note References  What is XXE XXE = XML eXternal Entities
XXE can occur when XML documents get parsed. We traditionally think of XXE vulnerabilities as uploading an XML file that includes an external entity, an example of this would be:</description>
    </item>
    
  </channel>
</rss>
